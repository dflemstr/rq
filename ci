#!/bin/bash -e

function for-target {
    local wanted_target
    wanted_target=$1
    shift

    if [[ "$TARGET" == "$wanted_target" ]]
    then "$@"
    fi
}

function retry {
    local times
    local n

    times="$1"
    shift
    n=0

    until [ "$n" -ge "$times" ]
    do
        "$@" && break
        n=$(($n + 1))
    done
}

function run-docker {
    docker pull "dflemstr/buildenv:$TARGET"
    mkdir -p "$HOME/.cargo"
    exec docker run \
         --privileged \
         --rm -ti \
         --entrypoint /bin/bash \
         -u root \
         -v "$HOME/.cargo:$HOME/.cargo" \
         -v "$PWD:/host" \
         -e "HOME=$HOME" \
         -e "TARGET=$TARGET" \
         -e "GITHUB_TOKEN=$GITHUB_TOKEN" \
         -e "SKIP_TESTS=$SKIP_TESTS" \
         -e "USE_DOCKER=false" \
         -e "IN_DOCKER=true" \
         "dflemstr/buildenv:$TARGET" \
         -c "if ! getent group $(id -gn)
             then groupadd -g $(id -g) $(id -gn)
             fi &&
             if ! getent passwd $(id -un)
             then useradd -u $(id -u) -g $(id -g) -m $(id -un)
             fi &&
             chown $(id -un):$(id -gn) -R $HOME &&
             adduser $(id -un) sudo &&
             cd /host &&
             sudo -HEu $(id -un) ./ci $*"

}

function apt-install {
    if [[ "$TARGET" == *linux* ]]
    then
        sudo apt-get update
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get install -y --no-install-recommends "$@"
        sudo rm -rf /var/lib/apt/lists/*
    fi
}

function install-rust {
    if ! which cargo &>/dev/null
    then
        curl "https://sh.rustup.rs" -sSLfo rustup.sh
        sh rustup.sh -y
        source ~/.cargo/env
        rustup target add "$TARGET" || true
    fi
}

function install-v8 {
    if [ ! -d v8-build ]
    then
        wget "https://s3-eu-west-1.amazonaws.com/record-query/v8/$TARGET/5.6.222/v8-build.tar.gz"
        tar -xvf v8-build.tar.gz
    fi

    export V8_LIBS=$PWD/v8-build/lib/libv8uber.a
    export V8_SOURCE=$PWD/v8-build
}

function configure-linker {
    if [[ "$TARGET" != *darwin* ]]
    then export CROSS_COMPILE="$TARGET-"
    fi

    mkdir -p .cargo

    if [ "$TARGET" = "x86_64-unknown-linux-gnu" ]
    then
        lib_search_args=$(print-gcc-search-args "g++" && print-gcc-search-args "$TARGET-g++")

        cat > .cargo/config <<EOF
[build]
linker = "g++"
rustflags = [${lib_search_args%,}]
EOF
    elif [[ "$TARGET" != *darwin* ]]
    then
        extra_args='"-l", "static=stdc++"'

        target_search_args=$(print-gcc-search-args "$TARGET-g++")
        host_search_args=$(print-gcc-search-args "g++")

        sudo tee /usr/bin/custom-linker >/dev/null <<EOF
#!/usr/bin/env python2
import os
import subprocess
import sys

target = os.environ['TARGET']

real_args = []
for arg in sys.argv[1:]:
  # TODO: don't hard-code the .o paths here, they might change
  if arg.endswith('/crt1.o'):
    real_args.append('/x-tools/{0}/{0}/sysroot/usr/lib/crt1.o'.format(target))
  elif arg.endswith('/crti.o'):
    real_args.append('/x-tools/{0}/{0}/sysroot/usr/lib/crti.o'.format(target))
    real_args.append('/x-tools/{0}/lib/gcc/{0}/6.2.0/crtbegin.o'.format(target))
  elif arg.endswith('/crtn.o'):
    real_args.append('/x-tools/{0}/lib/gcc/{0}/6.2.0/crtend.o'.format(target))
    real_args.append('/x-tools/{0}/{0}/sysroot/usr/lib/crtn.o'.format(target))
  else:
    real_args.append(arg)

cmd = [target + "-g++"] + real_args
print cmd
sys.exit(subprocess.call(cmd))
EOF
        sudo chmod +x /usr/bin/custom-linker

        cat > .cargo/config <<EOF
[target.$TARGET]
linker = "custom-linker"
rustflags = [$extra_args, ${target_search_args%,}]

[build]
linker = "g++"
rustflags = [$extra_args, ${host_search_args%,}]
EOF
    fi
}

function ci-test {
    local extra_args
    if [ "${SKIP_TESTS:-false}" = true ]
    then extra_args=(--no-run)
    else extra_args=()
    fi

    install-rust
    install-v8

    cargo test --target "$TARGET" "${extra_args[@]}"
}

function ci-deploy {
    install-rust
    install-v8

    cargo build --release --target="$TARGET"
    git fetch origin
    revision=$(git describe --tags)
    mkdir -p "target/deploy/$TARGET"
    mkdir -p "target/deploy/$TARGET/$revision"

    if [[ "$TARGET" == *darwin* ]]
    then
        strip "target/$TARGET/release/rq"
    else
        "$TARGET-strip" "target/$TARGET/release/rq"
    fi

    cp "target/$TARGET/release/rq" "target/deploy/$TARGET/rq"
    cp "target/$TARGET/release/rq" "target/deploy/$TARGET/$revision/rq"
    curl "https://img.shields.io/badge/${TARGET//-/--}-${revision//-/--}-blue.png" > "target/deploy/$TARGET/badge.png"
    curl "https://img.shields.io/badge/${TARGET//-/--}-${revision//-/--}-blue.svg" > "target/deploy/$TARGET/badge.svg"
    curl "https://img.shields.io/badge/v-$(echo $revision | sed 's/-/--/g;s/v//')-blue.png" > "target/deploy/$TARGET/badge-small.png"
    curl "https://img.shields.io/badge/v-$(echo $revision | sed 's/-/--/g;s/v//')-blue.svg" > "target/deploy/$TARGET/badge-small.svg"
    mkdir -p "target/deploy-release"
    cp "target/$TARGET/release/rq" "target/deploy-release/rq-$TARGET"
}

function ci-deploy-gh-pages {
    curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
    apt-install nodejs
    sudo npm install -g jsdoc
    jsdoc -c jsdoc/conf.json -d target/doc/js src/api.js src/prelude.js

    cd target/doc
    git init
    git config user.email 'nobody@nobody.org'
    git config user.name 'Travis CI'
    git add .
    git commit -m "Generate rustdoc for $TRAVIS_COMMIT"
    git push --force "https://${GITHUB_TOKEN}@github.com/dflemstr/rq.git" master:gh-pages
}

function print-gcc-search-args {
    "$@" -print-search-dirs | grep libraries | cut -d= -f2 | tr : '\n' | xargs readlink -f | xargs -I'{}' echo '"-L", "native={}",'
}

if [ "${USE_DOCKER:-false}" = true ] && [ "${IN_DOCKER:-false}" = false ]
then run-docker "$@"
fi

configure-linker

case "$1" in
    test )
        shift; ci-test "$@" ;;
    deploy )
        shift; ci-deploy "$@" ;;
    deploy-gh-pages )
        shift; for-target x86_64-unknown-linux-gnu ci-deploy-gh-pages "$@" ;;
esac
